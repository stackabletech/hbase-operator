---
apiVersion: kuttl.dev/v1beta1
kind: TestAssert
timeout: 30
commands:
  - script: |
      set -euo pipefail

      # Get the name of the first pod by labels
      POD=$(kubectl -n "$NAMESPACE" get pod -l app.kubernetes.io/component=master,app.kubernetes.io/role-group=default -o name | head -n 1 | sed -e 's#pod/##')

      # Assert that environment variables have the correct values
      kubectl -n "$NAMESPACE" get pod "$POD" -o yaml | yq -r '.spec.containers[0].env[] | select (.name == "TEST_VAR_FROM_MASTER").value' | grep '^MASTER$'
      kubectl -n "$NAMESPACE" get pod "$POD" -o yaml | yq -r '.spec.containers[0].env[] | select (.name == "TEST_VAR_FROM_MRG").value' | grep '^MASTER$'
      kubectl -n "$NAMESPACE" get pod "$POD" -o yaml | yq -r '.spec.containers[0].env[] | select (.name == "TEST_VAR").value' | grep '^MASTER_RG$'
  - script: |
      set -euo pipefail

      # Get the name of the first pod by labels
      POD=$(kubectl -n "$NAMESPACE" get pod -l app.kubernetes.io/component=regionserver,app.kubernetes.io/role-group=resources-from-role -o name | head -n 1 | sed -e 's#pod/##')

      # Assert that environment variables have the correct values
      kubectl -n "$NAMESPACE" get pod "$POD" -o yaml | yq -r '.spec.containers[0].env[] | select (.name == "TEST_VAR_FROM_RS").value' | grep '^REGIONSERVER$'
      kubectl -n "$NAMESPACE" get pod "$POD" -o yaml | yq -r '.spec.containers[0].env[] | select (.name == "TEST_VAR_FROM_RFR").value' | grep '^REGIONSERVER$'
      kubectl -n "$NAMESPACE" get pod "$POD" -o yaml | yq -r '.spec.containers[0].env[] | select (.name == "TEST_VAR").value' | grep '^REGIONSERVER_RFR$'
  - script: |
      set -euo pipefail

      # Get the name of the first pod by labels
      POD=$(kubectl -n "$NAMESPACE" get pod -l app.kubernetes.io/component=regionserver,app.kubernetes.io/role-group=resources-from-role-group -o name | head -n 1 | sed -e 's#pod/##')

      # Assert that environment variables have the correct values
      kubectl -n "$NAMESPACE" get pod "$POD" -o yaml | yq -r '.spec.containers[0].env[] | select (.name == "TEST_VAR_FROM_RS").value' | grep '^REGIONSERVER$'
      kubectl -n "$NAMESPACE" get pod "$POD" -o yaml | yq -r '.spec.containers[0].env[] | select (.name == "TEST_VAR_FROM_RFRG").value' | grep '^REGIONSERVER$'
      kubectl -n "$NAMESPACE" get pod "$POD" -o yaml | yq -r '.spec.containers[0].env[] | select (.name == "TEST_VAR").value' | grep '^REGIONSERVER_RFRG$'
  - script: |
      set -euo pipefail

      # Get the name of the first pod by labels
      POD=$(kubectl -n "$NAMESPACE" get pod -l app.kubernetes.io/component=restserver,app.kubernetes.io/role-group=default -o name | head -n 1 | sed -e 's#pod/##')

      # Assert that environment variables have the correct values
      kubectl -n "$NAMESPACE" get pod "$POD" -o yaml | yq -r '.spec.containers[0].env[] | select (.name == "TEST_VAR_FROM_REST").value' | grep '^RESTSERVER$'
      kubectl -n "$NAMESPACE" get pod "$POD" -o yaml | yq -r '.spec.containers[0].env[] | select (.name == "TEST_VAR_FROM_REST_RG").value' | grep '^RESTSERVER$'
      kubectl -n "$NAMESPACE" get pod "$POD" -o yaml | yq -r '.spec.containers[0].env[] | select (.name == "TEST_VAR").value' | grep '^RESTSERVER_RG$'
