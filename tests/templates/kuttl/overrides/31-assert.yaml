---
apiVersion: kuttl.dev/v1beta1
kind: TestAssert
timeout: 30
commands:
    # master, default RG
  - script: |
      set -euo pipefail

      # Get the name of the first pod by labels
      POD=$(
        kubectl get pod --namespace "$NAMESPACE" \
          --label app.kubernetes.io/component=master \
          --label app.kubernetes.io/role-group=default \
          --output name \
        | head --lines 1 \
        | sed --expression 's#pod/##'
      )

      # Assert that environment variables have the correct values
      kubectl get pod "$POD" --namespace "$NAMESPACE" --output yaml \
      | yq --unwrapScalar '.spec.containers[0].env[] | select (.name == "TEST_VAR_FROM_MASTER").value' \
      | grep '^MASTER$'

      kubectl get pod "$POD" --namespace "$NAMESPACE" --output yaml \
      | yq --unwrapScalar '.spec.containers[0].env[] | select (.name == "TEST_VAR_FROM_MRG").value' \
      | grep '^MASTER$'

      kubectl get pod "$POD" --namespace "$NAMESPACE" --output yaml \
      | yq --unwrapScalar '.spec.containers[0].env[] | select (.name == "TEST_VAR").value' \
      | grep '^MASTER_RG$'

    # regionserver, resources-from-role RG
  - script: |
      set -euo pipefail

      # Get the name of the first pod by labels
      POD=$(
        kubectl get pod \
          --namespace "$NAMESPACE" \
          --label app.kubernetes.io/component=regionserver \
          --label app.kubernetes.io/role-group=resources-from-role \
          --output name \
        | head --lines 1 \
        | sed --expression 's#pod/##'
      )

      # Assert that environment variables have the correct values
      kubectl get pod "$POD" --namespace "$NAMESPACE" --output yaml \
      | yq --unwrapScalar '.spec.containers[0].env[] | select (.name == "TEST_VAR_FROM_RS").value' \
      | grep '^REGIONSERVER$'

      kubectl get pod "$POD" --namespace "$NAMESPACE" --output yaml \
      | yq --unwrapScalar '.spec.containers[0].env[] | select (.name == "TEST_VAR_FROM_RFR").value' \
      | grep '^REGIONSERVER$'

      kubectl get pod "$POD" --namespace "$NAMESPACE" --output yaml \
      | yq --unwrapScalar '.spec.containers[0].env[] | select (.name == "TEST_VAR").value' \
      | grep '^REGIONSERVER_RFR$'

    # regionserver, resources-from-role-group RG
  - script: |
      set -euo pipefail

      # Get the name of the first pod by labels
      POD=$(
        kubectl get pod \
          --namespace "$NAMESPACE" \
          --label app.kubernetes.io/component=regionserver \
          --label app.kubernetes.io/role-group=resources-from-role-group \
          --output name \
        | head --lines 1 \
        | sed --expression 's#pod/##'
      )

      # Assert that environment variables have the correct values
      kubectl get pod "$POD" --namespace "$NAMESPACE" --output yaml \
      | yq --unwrapScalar '.spec.containers[0].env[] | select (.name == "TEST_VAR_FROM_RS").value' \
      | grep '^REGIONSERVER$'

      kubectl get pod "$POD" --namespace "$NAMESPACE" --output yaml \
      | yq --unwrapScalar '.spec.containers[0].env[] | select (.name == "TEST_VAR_FROM_RFRG").value' \
      | grep '^REGIONSERVER$'

      kubectl get pod "$POD" --namespace "$NAMESPACE" --output yaml \
      | yq --unwrapScalar '.spec.containers[0].env[] | select (.name == "TEST_VAR").value' \
      | grep '^REGIONSERVER_RFRG$'

    # restserver, default RG
  - script: |
      set -euo pipefail

      # Get the name of the first pod by labels
      POD=$(
        kubectl get pod \
          --namespace "$NAMESPACE" \
          --label app.kubernetes.io/component=restserver \
          --label app.kubernetes.io/role-group=default \
          --output name \
        | head --lines 1 \
        | sed --expression 's#pod/##'
      )

      # Assert that environment variables have the correct values
      kubectl get pod "$POD" --namespace "$NAMESPACE" --output yaml \
      | yq --unwrapScalar '.spec.containers[0].env[] | select (.name == "TEST_VAR_FROM_REST").value' \
      | grep '^RESTSERVER$'

      kubectl get pod "$POD" --namespace "$NAMESPACE" --output yaml \
      | yq --unwrapScalar '.spec.containers[0].env[] | select (.name == "TEST_VAR_FROM_REST_RG").value' \
      | grep '^RESTSERVER$'

      kubectl get pod "$POD" --namespace "$NAMESPACE" --output yaml \
      | yq --unwrapScalar '.spec.containers[0].env[] | select (.name == "TEST_VAR").value' \
      | grep '^RESTSERVER_RG$'
