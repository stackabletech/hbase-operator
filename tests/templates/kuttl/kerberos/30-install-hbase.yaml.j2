---
apiVersion: kuttl.dev/v1beta1
kind: TestStep
commands:
  - script: |
      kubectl apply -n $NAMESPACE -f - <<EOF
      apiVersion: zookeeper.stackable.tech/v1alpha1
      kind: ZookeeperZnode
      metadata:
        name: hbase-znode
      spec:
        clusterRef:
          name: zookeeper
      ---
      apiVersion: hbase.stackable.tech/v1alpha1
      kind: HbaseCluster
      metadata:
        name: hbase
      spec:
        image:
{% if test_scenario['values']['hbase'].find(",") > 0 %}
          custom: "{{ test_scenario['values']['hbase'].split(',')[1] }}"
          productVersion: "{{ test_scenario['values']['hbase'].split(',')[0] }}"
{% else %}
          productVersion: "{{ test_scenario['values']['hbase'] }}"
{% endif %}
          pullPolicy: IfNotPresent
        clusterConfig:
          hdfsConfigMapName: hdfs
          zookeeperConfigMapName: hbase-znode
          listenerClass: {{ test_scenario['values']['listener-class'] }}
          authentication:
            tlsSecretClass: tls
            kerberos:
              secretClass: kerberos-$NAMESPACE
{% if lookup('env', 'VECTOR_AGGREGATOR') %}
          vectorAggregatorConfigMapName: vector-aggregator-discovery
{% endif %}
        masters:
          configOverrides: &configOverrides
            hbase-site.xml:
              hbase.security.authorization: "true"
              #hbase.coprocessor.region.classes: tech.stackable.hbase.OpenPolicyAgentAccessController
              #hbase.coprocessor.master.classes: tech.stackable.hbase.OpenPolicyAgentAccessController
              #hbase.coprocessor.regionserver.classes: tech.stackable.hbase.OpenPolicyAgentAccessController
              hbase.coprocessor.region.classes: org.apache.hadoop.hbase.security.access.AccessController
              hbase.coprocessor.master.classes: org.apache.hadoop.hbase.security.access.AccessController
              hbase.coprocessor.regionserver.classes: org.apache.hadoop.hbase.security.access.AccessController
              hbase.security.exec.permission.checks: "true"
          config:
            logging:
              enableVectorAgent: {{ lookup('env', 'VECTOR_AGGREGATOR') | length > 0 }}
          roleGroups:
            default:
              replicas: 2
        regionServers:
          configOverrides: *configOverrides
          config:
            logging:
              enableVectorAgent: {{ lookup('env', 'VECTOR_AGGREGATOR') | length > 0 }}
          roleGroups:
            default:
              replicas: 2
        restServers:
          configOverrides: *configOverrides
          config:
            logging:
              enableVectorAgent: {{ lookup('env', 'VECTOR_AGGREGATOR') | length > 0 }}
          roleGroups:
            default:
              replicas: 1
      EOF
