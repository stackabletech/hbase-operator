# create 'sbernauer', {NAME => 'benchmark', IN_MEMORY => false, TTL => 2147483647 , BLOOMFILTER => 'NONE', COMPRESSION => 'NONE'}, SPLITS=> ['user1000000000000000000', 'user2000000000000000000', 'user3000000000000000000', 'user4000000000000000000', 'user5000000000000000000', 'user6000000000000000000', 'user7000000000000000000', 'user8000000000000000000', 'user9000000000000000000']
# /stackable/ycsb-0.17.0/bin/ycsb.sh load hbase20 -p table=sbernauer -p columnfamily=benchmark -p recordcount=100000 -p fieldcount=10 -p fieldlength=100 -p workload=site.ycsb.workloads.CoreWorkload -threads 10 -s
# /stackable/ycsb-0.17.0/bin/ycsb.sh run hbase20 -p operationcount=100000 -p table=sbernauer -p columnfamily=benchmark -P /stackable/ycsb-0.17.0//workloads/workloada -s -threads 100 -target 50000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ycsb
  labels:
    app: ycsb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ycsb
  template:
    metadata:
      labels:
        app: ycsb
    spec:
      containers:
      - name: ycsb
        image: docker.stackable.tech/soenkeliebau/ycsb
        imagePullPolicy: Always
        # resources:
        #   limits:
        #     cpu: "8"
        #     memory: 26Gi
        #   requests:
        #     cpu: "7"
        #     memory: 26Gi
        env:
          - name: KRB5_CONFIG
            value: /stackable/kerberos/krb5.conf
          - name: HBASE_OPTS
            value: -Djava.security.krb5.conf=/stackable/kerberos/krb5.conf
          - name: JAVA_OPTS # As HBASE_OPTS does not get picked up
            value: -Djava.security.krb5.conf=/stackable/kerberos/krb5.conf
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        command:
          - /bin/bash
          - -c
          - |
            set -ex
            microdnf install krb5-workstation openssl

            export KERBEROS_REALM=$(grep -oP 'default_realm = \K.*' /stackable/kerberos/krb5.conf)
            mkdir -p /stackable/ycsb-0.17.0/conf/
            cat /tmp/hbase-site.xml | sed -e 's/${{env.KERBEROS_REALM}}/'"$KERBEROS_REALM/g" > /stackable/ycsb-0.17.0/conf/hbase-site.xml

            klist -k /stackable/kerberos/keytab
            kinit -kt /stackable/kerberos/keytab hbase/access-hbase.${NAMESPACE}.svc.cluster.local
            klist
            sleep infinity
        volumeMounts:
        - mountPath: /tmp/hbase-site.xml
          name: config-volume-hbase
          subPath: hbase-site.xml
        - name: kerberos
          mountPath: /stackable/kerberos
      tolerations:
        - key: "app"
          operator: "Equal"
          value: "ycsb"
          effect: "NoSchedule"
      volumes:
      - name: config-volume-hbase
        configMap:
          name: hbase
      - name: kerberos
        ephemeral:
          volumeClaimTemplate:
            metadata:
              annotations:
                secrets.stackable.tech/class: kerberos-kuttl-test-capital-liger # TODO adopt
                secrets.stackable.tech/scope: service=access-hbase
                secrets.stackable.tech/kerberos.service.names: hbase # TOOD use testuser
            spec:
              storageClassName: secrets.stackable.tech
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: "1"
      securityContext:
        runAsUser: 0
# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: hbase-discovery
# data:
#   hbase-site.xml: |-
#     <?xml version="1.0"?>
#     <configuration>
#       <property>
#         <name>hbase.master.kerberos.principal</name>
#         <value>hbase/hbase.kuttl-test-daring-mammal.svc.cluster.local@REALM_IS_PICKED_FROM_DEFAULT_REALM</value>
#       </property>
#       <property>
#         <name>hbase.regionserver.kerberos.principal</name>
#         <value>hbase/hbase.kuttl-test-daring-mammal.svc.cluster.local@REALM_IS_PICKED_FROM_DEFAULT_REALM</value>
#       </property>
#       <property>
#         <name>hbase.rpc.protection</name>
#         <value>privacy</value>
#       </property>
#       <property>
#         <name>hbase.security.authentication</name>
#         <value>kerberos</value>
#       </property>
#       <property>
#         <name>hbase.ssl.enabled</name>
#         <value>true</value>
#       </property>
#       <property>
#         <name>hbase.zookeeper.property.clientPort</name>
#         <value>2282</value>
#       </property>
#       <property>
#         <name>hbase.zookeeper.quorum</name>
#         <value>zookeeper-server-default-0.zookeeper-server-default.kuttl-test-daring-mammal.svc.cluster.local:2282</value>
#       </property>
#       <property>
#         <name>zookeeper.znode.parent</name>
#         <value>/znode-49b43377-5cda-4b8f-a8e6-66c0a1f4def4/hbase</value>
#       </property>
#     </configuration>
#   log4j.properties: |+
#     log4j.rootLogger=DEBUG, CONSOLE, FILE

#     log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
#     log4j.appender.CONSOLE.Threshold=DEBUG
#     log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
#     log4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} %-5p [%t] %c{2}: %.1000m%n
